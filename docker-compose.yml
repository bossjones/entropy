# Uses an empty image and mounts in the only binary.
# This is helpful in development because it remove the image build process
# from the redeployment chain. This is Go afterall and we like our builds
# minimal. Using volumes in this way we don't even need to recreate the
# container. We can simply restart the existing one.
entropy:
  build: .
  dockerfile: local.df
  volumes:
   - ./bin:/src/buildertools/bin
   - ./pkg:/src/buildertools/pkg
   - .:/src/buildertools/src/github.com/buildertools/entropy
  ports:
   - 8080:2476
  links:
   - swarm:swarm
   - node1:node1

swarm:
  image: swarm
  ports:
   - 3376
  links:
   - node1:node1
   - node2:node2
   - node3:node3
  command: ["manage", "-H", "tcp://0.0.0.0:3376", "nodes://node1:2375,node2:2375,node3:2375"]
  

# Build a small docker fleet with a few dummy containers running (dind)
node1:
  image: docker:1.10-dind
  privileged: true

node2:
  image: docker:1.10-dind
  privileged: true

node3:
  image: docker:1.10-dind
  privileged: true

rt1:
  image: docker:1.10
  command: docker run -d --label buildertools.entropy.agent --label buildertools.entropy.frequency=100 --label buildertools.entropy.probability=5 --label buildertools.entropy.faults=latency,pause alpine sleep 36000
  links:
   - node1:docker

rt2:
  image: docker:1.10
  command: docker run -d --label buildertools.entropy.agent --label buildertools.entropy.frequency=100 --label buildertools.entropy.probability=5 --label buildertools.entropy.faults=partition alpine sleep 36000
  links:
   - node2:docker

rt3:
  image: docker:1.10
  command: docker run -d --label buildertools.entropy.agent --label buildertools.entropy.frequency=100 --label buildertools.entropy.probability=5 --label buildertools.entropy.faults=reordering,loss --label buildertools.entropy.target=aaaabbbbcccc --label buildertools.entropy.criteria=container:aaaabbbbcccc alpine sleep 36000
  links:
   - node3:docker

# Integration tests that run every 30 seconds against entropy
#local-integ:
#  build: ./integ
#  links:
#   - entropy:entropy

#redis:
#  image: redis
#  log_driver: none

#influxdb:
#  image: tutum/influxdb
#  expose:
#   - 8083
#   - 8086
#  ports:
#   - 8083:8083
#   - 8086:8086
#  environment:
#    PRE_CREATE_DB: "mydb"
#  log_driver: none

#grafana:
#  image: grafana/grafana
#  read_only: true
#  volumes:
#   - ./dashboard.json:/dashboard.json
#  ports:
#   - 3000:3000
#  links:
#   - influxdb:influxdb
